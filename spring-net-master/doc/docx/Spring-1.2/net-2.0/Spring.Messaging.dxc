<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<DocumentXComments Version="5.0" Moniker="L:\projects\spring-net\trunk\build\net\2.0\debug\Spring.Messaging.dll" DocType="dx.Net" Template="" ShowInherited="False" SpellLastCheckDateTime="30/12/1899 00:00:00" TreePath="Spring.Messaging" RelatedProject="Spring-1.2.0.dxp" RelatedHSProject="" LoadIncludeFilter="" LoadExcludeFilter="" LoadPrivate="False" LoadOnDemand="True" LoadSourceComments="False">
    <IgnoreWordList/>
<UserData>
    <InPlaceEditor>
        <inheritedMembers>on</inheritedMembers>
        <protectedMembers>on</protectedMembers>
        <dtscrollpos>0</dtscrollpos>
    </InPlaceEditor>
</UserData>
<c eid="Spring.Messaging" tid="##SUMMARY" q="" cd="39675.079212963"><![CDATA[Contains integration classes for MSMQ allowing for 'Spring-style' MSMQ access.]]></c>
<c eid="Spring.Messaging" tid="##PROJECT_GETTINGSTARTED" q="" cd="39756.4445949074"><![CDATA[Please refer to the&nbsp;MSMQ QuickStart application that is part of the distribution in the examples directory.&nbsp; If installing using the Windows installer you can find the example under the Spring.NET menu.&nbsp; Documentation for the quickstart example can be found online <A href="http://www.springframework.net/doc-latest/reference/html/msmq-quickstart.html">here</A> as well as in the reference docs included in the distribution.&nbsp; There is also the section "<A href="http://www.springframework.net/doc-latest/reference/html/msmq.html#msmq-quick-tour">A quick tour for the impatient</A>" in the reference docs that is a good introduction.]]></c>
<c eid="Spring.Messaging" tid="##PROJECT_INTRODUCTION" q="" cd="39756.4448148148"><![CDATA[<P>The goals of Spring's MSMQ 3.0 messaging support is to raise the level of abstraction when writing MSMQ applications. The <FONT color=#000000><CODE class=literal>System.Messaging</CODE> API is a low-level API that provides the basis for creating a messaging application. However, 'Out-of-the-box', <CODE class=literal>System.Messaging</CODE> leaves the act of creating sophisticated multi-threaded messaging servers and clients as an infrastructure activity for the developer. Spring fills this gap by proving easy to use helper classes that makes creating an enterprise messaging application easy. These helper classes take into account the nuances of the <CODE class=literal>System.Messaging</CODE> API, such as its lack of thread-safety in many cases, the handling of so-called 'poison messages' (messages that are endlessly redelivered due to an unrecoverable exception during message processing), and combining database transactions with message transactions. Other goals of Spring's MSMQ messaging support are to support messaging best practices, in particular encouraging a clean architectural layering that separates the messaging middleware specifics from the core business processing.</FONT></P>
<P>Spring's approach to distributed computing has always been to promote a plain old .NET object approach or a PONO programming model. In this approach plain .NET objects are those that are devoid of any reference to a particular middleware technology. Spring provides the 'adapter' classes that converts between the middleware world, in this case MSMQ, and the oo-world of your business processing. This is done through the use of Spring's <FONT color=#000000><CODE class=literal>MessageListenerAdapter</CODE> class and <CODE class=literal>IMessageConverters</CODE>.</FONT></P>]]></c>
<c eid="Spring.Messaging~Spring.Messaging_namespace" tid="##SUMMARY" q="" cd="39675.0798958333">Base exceptions</c>
<c eid="Spring.Messaging~Spring.Messaging.Core_namespace" tid="##SUMMARY" q="" cd="39675.079537037"><![CDATA[Core namespace of the MSMQ support.&nbsp; Provides a MessageQueueTemplate class and various callback interfaces/delegates]]></c>
<c eid="Spring.Messaging~Spring.Messaging.Listener_namespace" tid="##SUMMARY" q="" cd="39675.0797800926">Message container functionality.</c>
<c eid="Spring.Messaging~Spring.Messaging.Support_namespace" tid="##SUMMARY" q="" cd="39675.080474537">Provides general MSMQ support classes to be used by higher-level classes like MessageQueueTemplate</c>
<c eid="Spring.Messaging~Spring.Messaging.Support.Converters_namespace" tid="##SUMMARY" q="" cd="39675.0808449074">Provides a IMessageConverter abstraction to convert between .NET objects and MSMQ messages</c>
    </DocumentXComments>
